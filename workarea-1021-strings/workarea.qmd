## Load Package
```{r}
library(tidyverse)
```


```{r}
classes <- data.frame(
  sem        = c("SP2023", "FA2023", "SP2024"),
  area       = c("History", "Math", "Anthro"),
  enroll     = c("30 - people", "20 - people", "25 - people"),
  instructor = c("Ernesto Capello", "Lori Ziegelmeier", "Arjun Guneratne")
)

classes
```

```{r}
# Define a new variable "num" that adds up the number of characters in the area label
classes |> 
  mutate(num = str_length(area))
```

```{r}
# Change the areas to "history", "math", "anthro" instead of "History", "Math", "Anthro"
classes |> 
  mutate(area = str_to_lower(area))
```

```{r}
# Create a variable that id's which courses were taught in spring
classes |> 
  mutate(spring = str_detect(sem, "SP"))
```

```{r}
# Change the semester labels to "fall2023", "spring2024", "spring2023"
classes |> 
  mutate(sem = str_replace_all(sem, "SP", "spring")) |> 
  mutate(sem = str_replace_all(sem, "FA", "fall"))
```

```{r}
classes |> 
  mutate(enroll = str_replace_all(enroll, "e", "3"))
```

```{r}
# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
classes |> 
  mutate(semester = str_sub(sem, 1, 2), 
         year = str_sub(sem, 3, 6))
```

```{r}
classes |> 
  separate(instructor, c("first", "last"), sep = " ")
```


```{r}
classes |> 
  separate(instructor, c("first", "last"))
```

```{r}
classes |> 
  separate(sem, c("semester", "year"), sep = "(?<=[SP|FA])(?=2)", remove = FALSE)
```


## Ex 1
```{r}
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")

# Check it out
head(courses)
```

```{r}
# Construct a table that indicates the number of classes offered in each day/time slot
# Print only the 6 most popular time slots
courses |> 
  count(days, time, sort = TRUE)
```

## Ex2
```{r}
course_clean <- courses |> 
  separate(avail_max, c("avail", "max"), " / ") |> 
  mutate(avail = as.numeric(avail),
         max = as.numeric(max),
         enrollment = max - avail) |> 
  separate(number, c("dept", "number", "section"))
course_clean
```

## Ex3
```{r}
# Identify the 6 departments that offered the most sections
course_clean |> 
  count(dept, sort = TRUE)

# Identify the 6 departments with the longest average course titles
course_clean |> 
  select(dept, name) |> 
  mutate(c_len = str_length(name)) |> 
  arrange(desc(c_len)) |> 
  head(6)
```

## Ex4
```{r}
course_clean |> 
  filter(instructor == "Alicia Johnson")

stat <- course_clean |> 
  filter(dept == "STAT") |> 
  mutate(name = str_remove(name, "Introduction to")) |> 
  mutate(name = str_replace_all(name, "Statistical", "Stat")) |> 
  separate(time, c("start_time", NA), sep = " - ") |> 
  select(number, name, start_time, enrollment)
stat
```

## Ex5
```{r}
enrollments <- course_clean |> 
  filter(!(dept %in% c("INTD", "PE")), 
         !(dept == "MUSI" & as.numeric(number)),
         !str_detect(section, "L"))
enrollments
```

## Ex 6
```{r}
#| fig-height: 6
#| fig-width: 8


enrollments |> 
  count(dept) |> 
  ggplot(mapping = aes(y = fct_reorder(dept, n), x = n)) +
  geom_col() +
  theme_minimal() +
  labs(x = "", y = "", title = "Number of courses offered by each department @ Macalester")
```

## Ex 7
```{r}
enrollments |>
  filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
```

```{r}
enrollments_2 <- enrollments |>
  distinct(days, time, instructor, .keep_all = TRUE)

# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
enrollments_2 |>
  filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
```

## regex
```{r}
# Define some strings to play around with
example <- "The quick brown fox jumps over the lazy dog."
```

```{r}
str_replace(example, "quick", "really quick")
```

```{r}
str_replace_all(example, "(fox|dog)", "****")
```

